/**
 * TravelGuide API
 * Documentació que correspon a l'API de l'aplicació TravelGuide
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';

import { Observable }                                        from 'rxjs';


import { Configuration }                                     from '../configuration';

import axios from "axios";
import { AxiosInstance } from "axios";
 
@Injectable()
export class SlackService {
    public configuration = new Configuration();

    private axiosClient: AxiosInstance;

    constructor() {
        this.axiosClient = axios.create({
            timeout: 3000,
			headers: {
				"Content-Type": "application/x-www-form-urlencoded"
			}
        });
    }


    /**
     * 
     * Afageix com a favorits una publicació a partir de la seva id
     * @param publicationId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public async fetchConversationsOfChannel(token: string, channelId: string): Promise<any> {
        if (token == null || token == undefined) {
            throw new Error('Required parameter token was null or undefined when calling fetchConversationsOfChannel.');
        }

        if (channelId == null || channelId == undefined) {
            throw new Error('Required parameter channelId was null or undefined when calling fetchConversationsOfChannel.');
        }

        const formData = new FormData();
        formData.append('token', token);
        formData.append('content', "null");

        let axiosResp = await this.axiosClient.request({
            method: 'post',
            url: `https://slack.com/api/conversations.history?channel=${ channelId }&pretty=1`,
            data: formData
        });

        return axiosResp;
    }
}