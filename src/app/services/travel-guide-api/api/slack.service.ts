/**
 * TravelGuide API
 * Documentació que correspon a l'API de l'aplicació TravelGuide
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
        HttpResponse, HttpEvent }                           from '@angular/common/http';

import { Observable }                                        from 'rxjs';


import { BASE_PATH }                     from '../variables';
import { Configuration }                                     from '../configuration';
 
 
@Injectable()
export class SlackService {
    protected basePath = 'https://virtserver.swaggerhub.com/hsaddouki/TravelGuideApi/1.0.0';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Afageix com a favorits una publicació a partir de la seva id
     * @param publicationId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fetchConversationsOfChannel(token: string, channelId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public fetchConversationsOfChannel(token: string, channelId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public fetchConversationsOfChannel(token: string, channelId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public fetchConversationsOfChannel(token: string, channelId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = new HttpHeaders();

        if (token == null || token == undefined) {
            throw new Error('Required parameter token was null or undefined when calling fetchConversationsOfChannel.');
        }

        if (channelId == null || channelId == undefined) {
            throw new Error('Required parameter channelId was null or undefined when calling fetchConversationsOfChannel.');
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        const formData = new FormData();
        formData.append('token', token);

        return this.httpClient.post<any>(`https://slack.com/api/conversations.history?channel=${ channelId }&pretty=1`, formData);
    }
}